worker_processes 1;

events {
    worker_connections 1024;
}

http {
    limit_req_zone $binary_remote_addr zone=siren-limit:10m rate=8r/m;   # не изменять

    log_format bodylog '$remote_addr - $remote_user [$time_local] '
    '"$request" $status $body_bytes_sent '
    '"$http_referer" "$http_user_agent" $request_time '
    '\n\n"$req_headers" \n"$req_body" \n>"$resp_body"';

    upstream flask {
        server siren-app:2345;
    }

    server {
        listen 8000;
        
        access_log  /var/log/nginx/server.log bodylog;

        lua_need_request_body on;

        set $resp_body "";
        set $req_body "";
        set $req_headers "";

        client_body_buffer_size 16k;
        client_max_body_size 16k;

        rewrite_by_lua_block {
            local req_headers = "Headers: ";
            ngx.var.req_body = ngx.req.get_body_data();
            local h, err = ngx.req.get_headers()
            for k, v in pairs(h) do
                req_headers = req_headers .. k .. ": " .. v .. "\n";
            end

            ngx.var.req_headers = req_headers;
        }

        body_filter_by_lua '
        local resp_body = string.sub(ngx.arg[1], 1, 1000)
        ngx.ctx.buffered = (ngx.ctx.buffered or "") .. resp_body
        if ngx.arg[2] then
          ngx.var.resp_body = ngx.ctx.buffered
        end
        ';

        location /ask {
            limit_req zone=siren-limit burst=7 nodelay;    # оставить параметры limit_req как есть, они необходимы для работы жюрейки
            proxy_pass http://flask;
            proxy_set_header Host $host:$server_port;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /do {
            limit_req zone=siren-limit burst=7 nodelay;    # оставить параметры limit_req как есть, они необходимы для работы жюрейки
            proxy_pass http://flask;
            proxy_set_header Host $host:$server_port;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /test {
            alias /var/;
        }

        location / {
            limit_req zone=siren-limit burst=7 nodelay;    # оставить параметры limit_req как есть, они необходимы для работы жюрейки
            proxy_pass http://flask;
            proxy_set_header Host $host:$server_port;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
}